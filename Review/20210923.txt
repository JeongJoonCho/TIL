public class 클래스이름{

}

->컴파일(javac.exe)->클래스이름.class

하나의 파일 안에 하나의 클래스를 선언하는 것이 관례

(but 두 개 이상의 클래스도 선언 가능

단, 파일 이름과 동일한 클래스만 public으로 선언 가능)


객체 생성 역할(인스턴스)
new 클래스();
- 클래스()는 기본생성자

클래스의 용도
- 라이브러리 용 (서비스 클래스)
	-> 자체적으로 실행되지 않음
	-> 다른 클래스에서 이용할 목적으로 만듦
- 실행용( 실행 클래스)
	-> main() 메소드를 가지고 있는 클래스
	-> 실행할 목적으로 만듦

1개의 애플리케이션 = (1개의 실행클래스)
		+ (n개의 라이브러리 클래스)

라이브러리 클래스
- 이미 만들어져서 제공되는 것이 있고(썬사 or 오라클)
- 직접 만들어서 제공하는 것이 있다.(커스텀)


클래스의 구성 멤버
-필드(field)
   -> 객체의 데이터가 저장되는 곳

-생성자(constructor)
   -> *객체 생성시 초기화 역할 담당*(엄청중요)
   -> 단 한번 실행, 리턴 타입 자체가 없음

-메소드(method)
   -> 객체의 동작에 해당하는 실행 블록

public class ClassName{

	//필드
	int fieldName;

	//생성자
	className(){...}

	//메소드
	void methodNamve(){...}

}






필드의 내용
 - 객체의 고유 데이터

 - 객체가 가져야 할 부품 객체

 - 객체의 현재 상태 데이터


필드(클래스에 속해 있는 변수) 선언
	
	타입 필드 [ = 초기값];

String company = "현대자동차";
String mode = "그랜저";
int maxSpeed = 300;
int productionYear; 
int currentSpeed;	        -> 아직 결정되지 않았을 때
boolean engineStart;


필드사용
 - 필드 값을 읽고, 변경하는 작업
 - 필드 사용 위치
	-객체 내부: "필드이름" 으로 바로 접근
	-객체 외부: "변수.필드이름"으로 접근



생성자
 - new 연산자에 의해 호출되어 객체의 초기화 담당
	new 클래스();
	- 필드의 값 설정
	- 메소드 호출해 객체를 사용할 수 있도록
	준비하는 역할 수행


기본 생성자(Default Constructor)
 -모든 클래스는 생성자가 반드시 존재하며 하나 이상 가질 수 있음
 - 생성자 선언을 생략하면 컴파일러는 다음과 같은 기본생성자 추가


생성자 선언
 - 디폴트 생성자 대신 개발자가 직접 선언
 	클래스(매개변수선언, ...){
	     //객체의 초기화 코드      -> 생성자 블록
	}
 - 개발자 선언한 생성자 존재 시 컴파일러는 기본 생성자 추가하지 않음


필드 초기화
 -초기값 없이 선언된 필드는 객체가 생성될 때 기본값으로 자동 설정
 -다른 값으로 필드 초기화하는 방법
	- 필드 선언할 때 초기값 설정
	- 생성자의 매개값으로 초기값 설정

생성자 다양화해야 하는 이유
 - 객체 생성할 때 외부 값으로 객체를 초기화할 필요
 - 외부 값이 어떤 타입으로 몇 개가 제공될 지 모름
	-> 생성자도 다양화


어노테이션(Annotation)
 - 프로그램에게 추가적인 정보를 제공해주는 메타데이터

 - 어노테이션 용도
	- 컴파일러에게 코드 작성 문법 에러 체크하도
	록 정보 제공
	
	- 소프트웨어 개발 툴이 빌드나 배치 시 코드
	를 자동 생성하게 정보 제공
	
	- 실행 시(런타임시) 특정 기능 실행하도록
	정보 제공

=> framework


System.out.println("------------------------------------------");
			System.out.println("1.계좌생성 | 2.계좌목록 | 3.예금 | 4.출금 | 5.종료");
			System.out.println("------------------------------------------");
			System.out.print("선택>>>");















